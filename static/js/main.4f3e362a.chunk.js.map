{"version":3,"sources":["components/Posts.js","components/Page.js","App.js","serviceWorker.js","index.js"],"names":["Posts","posts","loading","className","map","post","key","id","title","Page","postsPerPage","totalPosts","paginate","pageNumbers","i","Math","ceil","push","number","onClick","href","App","useState","setPosts","setLoading","currentPage","setCurrentPage","useEffect","a","axios","get","res","data","fetchPosts","indexOfLastPost","indexOfFirstPost","currentPosts","slice","length","pageNumber","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+RAgBeA,EAdD,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,MACb,OADiC,EAAbC,QAET,0CAGX,wBAAIC,UAAU,mBACTF,EAAMG,KAAI,SAAAC,GAAI,OACX,wBAAIC,IAAKD,EAAKE,GAAIJ,UAAU,mBACvBE,EAAKG,YCaPC,G,MArBF,SAAC,GAEV,IAFmD,IAAxCC,EAAuC,EAAvCA,aAAaC,EAA0B,EAA1BA,WAAWC,EAAe,EAAfA,SAC7BC,EAAc,GACZC,EAAG,EAAGA,GAAIC,KAAKC,KAAKL,EAAaD,GAAeI,IACpDD,EAAYI,KAAKH,GAGvB,OACI,6BACI,wBAAIX,UAAU,QACTU,EAAYT,KAAI,SAAAc,GAAM,OACnB,wBAAIZ,IAAKY,EAAQf,UAAU,aACvB,uBAAGgB,QAAS,kBAAMP,EAASM,IAASE,KAAK,KAAKjB,UAAU,aACnDe,W,iBCuBZG,G,MA/BH,WAAO,IAAD,EACSC,mBAAS,IADlB,mBACTrB,EADS,KACHsB,EADG,OAEaD,oBAAS,GAFtB,mBAETpB,EAFS,KAEDsB,EAFC,OAGqBF,mBAAS,GAH9B,mBAGTG,EAHS,KAGGC,EAHH,OAIOJ,mBAAS,CAAC,KAA1BZ,EAJS,oBAKhBiB,qBAAU,YACQ,uCAAG,4BAAAC,EAAA,6DACjBJ,GAAW,GADM,SAECK,IAAMC,IAAI,8CAFX,OAEXC,EAFW,OAGjBR,EAASQ,EAAIC,MACbR,GAAW,GAJM,2CAAH,qDAMhBS,KACC,IAEH,IAAMC,EAAkBT,EAAcf,EAChCyB,EAAmBD,EAAkBxB,EACrC0B,EAAenC,EAAMoC,MAAMF,EAAkBD,GAGnD,OACE,yBAAK/B,UAAU,kBACb,wBAAIA,UAAU,qBAAd,UACA,kBAAC,EAAD,CAAOF,MAAOmC,EAAclC,QAASA,IACrC,kBAAC,EAAD,CACAQ,aAAcA,EACdC,WAAYV,EAAMqC,OACjB1B,SARY,SAAC2B,GAAD,OAAgBb,EAAea,SCb9BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4f3e362a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Posts = ({ posts, loading}) => {\r\n    if (loading) {\r\n        return <h2>Loading...</h2>;\r\n    }\r\n    return (\r\n    <ul className='List-group mb-4'>\r\n        {posts.map(post => (\r\n            <li key={post.id} className='list-group-item'>\r\n                {post.title}\r\n            </li>\r\n        ))}\r\n    </ul>\r\n    );\r\n};\r\nexport default Posts;","import React from 'react';\r\nimport './Page.css';\r\nconst Page = ({postsPerPage,totalPosts,paginate }) => {\r\n    const pageNumbers = [];\r\n    for(let i =1; i<= Math.ceil(totalPosts / postsPerPage); i++) {\r\n        pageNumbers.push(i);\r\n  }\r\n\r\n  return (\r\n      <nav>\r\n          <ul className=\"page\">\r\n              {pageNumbers.map(number => (\r\n                  <li key={number} className=\"page-item\">\r\n                      <a onClick={() => paginate(number)} href=\"!#\" className=\"page-link\">\r\n                          {number}\r\n                      </a>\r\n                  </li>\r\n              ))}\r\n          </ul>\r\n      </nav>\r\n  )\r\n              \r\n}\r\nexport default Page;","import React, { useState, useEffect} from 'react';\nimport Posts from './components/Posts';\nimport Page from './components/Page';\nimport axios from 'axios';\nimport './App.css';\n\nconst App = () => {\n  const [posts,setPosts] = useState([]);\n  const [loading,setLoading] = useState(false);\n  const [currentPage,setCurrentPage] = useState(1);\n  const [postsPerPage] = useState([10]);\n  useEffect(() => {\n    const fetchPosts = async () => {\n      setLoading(true);\n      const res = await axios.get('https://jsonplaceholder.typicode.com/posts');\n      setPosts(res.data);\n      setLoading(false);\n    }\n    fetchPosts();\n  }, []);\n  \n  const indexOfLastPost = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\n  const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);\n\n  const paginate = (pageNumber) => setCurrentPage(pageNumber);\n  return (\n    <div className='container mt-5'>\n      <h1 className=\"text-primary mb-3\">My App</h1>\n      <Posts posts={currentPosts} loading={loading} />\n      <Page \n      postsPerPage={postsPerPage} \n      totalPosts={posts.length}\n       paginate={paginate}/>\n    </div>\n  );\n};\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}